# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        slow_ptr = head
        fast_ptr = head
        prev_of_slow_ptr = head
        midnode = None
        res = True 
        if (head != None and head.next != None):
            while (fast_ptr != None and
                   fast_ptr.next != None):
                fast_ptr = fast_ptr.next.next
                prev_of_slow_ptr = slow_ptr
                slow_ptr = slow_ptr.next
            if (fast_ptr != None):
                midnode = slow_ptr
                slow_ptr = slow_ptr.next
            second_half = slow_ptr
            prev_of_slow_ptr.next = None
            second_half = self.reverse(second_half) 
            res = self.compareLists(head, second_half)  
            second_half = self.reverse(second_half)
            if (midnode != None):
                prev_of_slow_ptr.next = midnode
                midnode.next = second_half
            else:
                prev_of_slow_ptr.next = second_half
        return res
    def reverse(self, second_half):
        prev = None
        current = second_half
        next = None
        while current != None:
            next = current.next
            current.next = prev
            prev = current
            current = next
        second_half = prev
        return second_half
    def compareLists(self, head1, head2):
        temp1 = head1
        temp2 = head2
        while (temp1 and temp2):
            if (temp1.val == temp2.val):
                temp1 = temp1.next
                temp2 = temp2.next
            else:
                return 0
        if (temp1 == None and temp2 == None):
            return 1
        return 0
